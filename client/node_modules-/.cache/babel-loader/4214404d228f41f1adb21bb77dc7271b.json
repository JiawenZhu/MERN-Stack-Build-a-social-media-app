{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\nexport const NOTIFY_TYPES = {\n  GET_NOTIFIES: 'GET_NOTIFIES',\n  CREATE_NOTIFY: 'CREATE_NOTIFY',\n  REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n  UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n  UPDATE_SOUND: 'UPDATE_SOUND',\n  DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n};\nexport const createNotify = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    try {\n      const res = await postDataAPI('notify', msg, auth.token);\n      socket.emit('createNotify', { ...res.data.notify,\n        user: {\n          username: auth.user.username,\n          avatar: auth.user.avatar\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const removeNotify = _ref2 => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref2;\n  return async dispatch => {\n    try {\n      await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\n      socket.emit('removeNotify', msg);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getNotifies = token => async dispatch => {\n  try {\n    const res = await getDataAPI('notifies', token);\n    dispatch({\n      type: NOTIFY_TYPES.GET_NOTIFIES,\n      payload: res.data.notifies\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const isReadNotify = _ref3 => {\n  let {\n    msg,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    dispatch({\n      type: NOTIFY_TYPES.UPDATE_NOTIFY,\n      payload: { ...msg,\n        isRead: true\n      }\n    });\n\n    try {\n      await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteAllNotifies = token => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES,\n    payload: []\n  });\n\n  try {\n    await deleteDataAPI('deleteAllNotify', token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFIES","createNotify","msg","auth","socket","dispatch","res","token","emit","data","notify","user","username","avatar","err","type","ALERT","payload","error","response","removeNotify","id","url","getNotifies","notifies","isReadNotify","isRead","_id","deleteAllNotifies"],"sources":["/Users/jiawenzhu/developer/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/notifyAction.js"],"sourcesContent":["import { GLOBALTYPES } from './globalTypes'\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData'\n\nexport const NOTIFY_TYPES = {\n    GET_NOTIFIES: 'GET_NOTIFIES',\n    CREATE_NOTIFY: 'CREATE_NOTIFY',\n    REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n    UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n    UPDATE_SOUND: 'UPDATE_SOUND',\n    DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n}\n\nexport const createNotify = ({msg, auth, socket}) => async (dispatch) => {\n    try {\n        const res = await postDataAPI('notify', msg, auth.token)\n\n        socket.emit('createNotify', {\n            ...res.data.notify,\n            user: {\n                username: auth.user.username,\n                avatar: auth.user.avatar\n            }\n        })\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const removeNotify = ({msg, auth, socket}) => async (dispatch) => {\n    try {\n        await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token)\n        \n        socket.emit('removeNotify', msg)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const getNotifies = (token) => async (dispatch) => {\n    try {\n        const res = await getDataAPI('notifies', token)\n        \n        dispatch({ type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies })\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\n\nexport const isReadNotify = ({msg, auth}) => async (dispatch) => {\n    dispatch({type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: {...msg, isRead: true}})\n    try {\n        await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const deleteAllNotifies = (token) => async (dispatch) => {\n    dispatch({type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES, payload: []})\n    try {\n        await deleteDataAPI('deleteAllNotify', token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}