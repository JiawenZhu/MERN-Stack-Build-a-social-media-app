{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from './globalTypes';\nimport { POST_TYPES } from './postAction';\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const createComment = _ref => {\n  let {\n    post,\n    newComment,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI('comment', data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      }); // Socket\n\n      socket.emit('createComment', newPost); // Notify\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateComment = _ref2 => {\n  let {\n    comment,\n    post,\n    content,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComments = EditData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeComment = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeComment = _ref4 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: DeleteData(comment.likes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteComment = _ref5 => {\n  let {\n    post,\n    comment,\n    auth,\n    socket\n  } = _ref5;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('deleteComment', newPost);\n\n    try {\n      deleteArr.forEach(item => {\n        deleteDataAPI(`comment/${item._id}`, auth.token);\n        const msg = {\n          id: item._id,\n          text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","postDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"sources":["/Users/jiawenzhu/developer/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/commentAction.js"],"sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from './globalTypes'\nimport { POST_TYPES } from './postAction'\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData'\nimport { createNotify, removeNotify } from '../actions/notifyAction'\n\n\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\n    const newPost = {...post, comments: [...post.comments, newComment]}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    try {\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\n        const res = await postDataAPI('comment', data, auth.token)\n\n        const newData = {...res.data.newComment, user: auth.user}\n        const newPost = {...post, comments: [...post.comments, newData]}\n        dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n        // Socket\n        socket.emit('createComment', newPost)\n\n        // Notify\n        const msg = {\n            id: res.data.newComment._id,\n            text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n            recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n            url: `/post/${post._id}`,\n            content: post.content, \n            image: post.images[0].url\n        }\n\n        dispatch(createNotify({msg, auth, socket}))\n        \n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\n    }\n}\n\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\n    const newComments = EditData(post.comments, comment._id, {...comment, content})\n    const newPost = {...post, comments: newComments}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n    try {\n        patchDataAPI(`comment/${comment._id}`, { content }, auth.token)\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\n    }\n}\n\nexport const likeComment = ({comment, post, auth}) => async (dispatch) => {\n    const newComment = {...comment, likes: [...comment.likes, auth.user]}\n\n    const newComments = EditData(post.comments, comment._id, newComment)\n\n    const newPost = {...post, comments: newComments}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    try {\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token)\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\n    }\n}\n\nexport const unLikeComment = ({comment, post, auth}) => async (dispatch) => {\n\n    const newComment = {...comment, likes: DeleteData(comment.likes, auth.user._id)}\n\n    const newComments = EditData(post.comments, comment._id, newComment)\n\n    const newPost = {...post, comments: newComments}\n    \n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    try {\n        await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token)\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\n    }\n}\n\nexport const deleteComment = ({post, comment, auth, socket}) => async (dispatch) => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment]\n    \n    const newPost = {\n        ...post,\n        comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    }\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\n\n    socket.emit('deleteComment', newPost)\n    try {\n       deleteArr.forEach(item => {\n            deleteDataAPI(`comment/${item._id}`, auth.token)\n\n            const msg = {\n                id: item._id,\n                text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n                recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n                url: `/post/${post._id}`,\n            }\n    \n            dispatch(removeNotify({msg, auth, socket}))\n       })\n    } catch (err) {\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\n    }\n\n}"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,UAAhC,QAAkD,eAAlD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,aAApC,QAAyD,uBAAzD;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,yBAA3C;AAGA,OAAO,MAAMC,aAAa,GAAG;EAAA,IAAC;IAACC,IAAD;IAAOC,UAAP;IAAmBC,IAAnB;IAAyBC;EAAzB,CAAD;EAAA,OAAsC,MAAOC,QAAP,IAAoB;IACnF,MAAMC,OAAO,GAAG,EAAC,GAAGL,IAAJ;MAAUM,QAAQ,EAAE,CAAC,GAAGN,IAAI,CAACM,QAAT,EAAmBL,UAAnB;IAApB,CAAhB;IAEAG,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;;IAEA,IAAI;MACA,MAAMK,IAAI,GAAG,EAAC,GAAGT,UAAJ;QAAgBU,MAAM,EAAEX,IAAI,CAACY,GAA7B;QAAkCC,UAAU,EAAEb,IAAI,CAACc,IAAL,CAAUF;MAAxD,CAAb;MACA,MAAMG,GAAG,GAAG,MAAMrB,WAAW,CAAC,SAAD,EAAYgB,IAAZ,EAAkBR,IAAI,CAACc,KAAvB,CAA7B;MAEA,MAAMC,OAAO,GAAG,EAAC,GAAGF,GAAG,CAACL,IAAJ,CAAST,UAAb;QAAyBa,IAAI,EAAEZ,IAAI,CAACY;MAApC,CAAhB;MACA,MAAMT,OAAO,GAAG,EAAC,GAAGL,IAAJ;QAAUM,QAAQ,EAAE,CAAC,GAAGN,IAAI,CAACM,QAAT,EAAmBW,OAAnB;MAApB,CAAhB;MACAb,QAAQ,CAAC;QAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;QAAgCC,OAAO,EAAEJ;MAAzC,CAAD,CAAR,CANA,CAQA;;MACAF,MAAM,CAACe,IAAP,CAAY,eAAZ,EAA6Bb,OAA7B,EATA,CAWA;;MACA,MAAMc,GAAG,GAAG;QACRC,EAAE,EAAEL,GAAG,CAACL,IAAJ,CAAST,UAAT,CAAoBW,GADhB;QAERS,IAAI,EAAEpB,UAAU,CAACqB,KAAX,GAAmB,6BAAnB,GAAmD,6BAFjD;QAGRC,UAAU,EAAEtB,UAAU,CAACqB,KAAX,GAAmB,CAACrB,UAAU,CAACuB,GAAX,CAAeZ,GAAhB,CAAnB,GAA0C,CAACZ,IAAI,CAACc,IAAL,CAAUF,GAAX,CAH9C;QAIRa,GAAG,EAAG,SAAQzB,IAAI,CAACY,GAAI,EAJf;QAKRc,OAAO,EAAE1B,IAAI,CAAC0B,OALN;QAMRC,KAAK,EAAE3B,IAAI,CAAC4B,MAAL,CAAY,CAAZ,EAAeH;MANd,CAAZ;MASArB,QAAQ,CAACP,YAAY,CAAC;QAACsB,GAAD;QAAMjB,IAAN;QAAYC;MAAZ,CAAD,CAAb,CAAR;IAEH,CAvBD,CAuBE,OAAO0B,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAAEG,IAAI,EAAEjB,WAAW,CAACwC,KAApB;QAA2BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAApC,CAAD,CAAR;IACH;EACJ,CA/B4B;AAAA,CAAtB;AAiCP,OAAO,MAAMc,aAAa,GAAG;EAAA,IAAC;IAACC,OAAD;IAAUlC,IAAV;IAAgB0B,OAAhB;IAAyBxB;EAAzB,CAAD;EAAA,OAAoC,MAAOE,QAAP,IAAoB;IACjF,MAAM+B,WAAW,GAAG5C,QAAQ,CAACS,IAAI,CAACM,QAAN,EAAgB4B,OAAO,CAACtB,GAAxB,EAA6B,EAAC,GAAGsB,OAAJ;MAAaR;IAAb,CAA7B,CAA5B;IACA,MAAMrB,OAAO,GAAG,EAAC,GAAGL,IAAJ;MAAUM,QAAQ,EAAE6B;IAApB,CAAhB;IAEA/B,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;;IACA,IAAI;MACAV,YAAY,CAAE,WAAUuC,OAAO,CAACtB,GAAI,EAAxB,EAA2B;QAAEc;MAAF,CAA3B,EAAwCxB,IAAI,CAACc,KAA7C,CAAZ;IACH,CAFD,CAEE,OAAOa,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAAEG,IAAI,EAAEjB,WAAW,CAACwC,KAApB;QAA2BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAApC,CAAD,CAAR;IACH;EACJ,CAV4B;AAAA,CAAtB;AAYP,OAAO,MAAMiB,WAAW,GAAG;EAAA,IAAC;IAACF,OAAD;IAAUlC,IAAV;IAAgBE;EAAhB,CAAD;EAAA,OAA2B,MAAOE,QAAP,IAAoB;IACtE,MAAMH,UAAU,GAAG,EAAC,GAAGiC,OAAJ;MAAaG,KAAK,EAAE,CAAC,GAAGH,OAAO,CAACG,KAAZ,EAAmBnC,IAAI,CAACY,IAAxB;IAApB,CAAnB;IAEA,MAAMqB,WAAW,GAAG5C,QAAQ,CAACS,IAAI,CAACM,QAAN,EAAgB4B,OAAO,CAACtB,GAAxB,EAA6BX,UAA7B,CAA5B;IAEA,MAAMI,OAAO,GAAG,EAAC,GAAGL,IAAJ;MAAUM,QAAQ,EAAE6B;IAApB,CAAhB;IAEA/B,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;;IAEA,IAAI;MACA,MAAMV,YAAY,CAAE,WAAUuC,OAAO,CAACtB,GAAI,OAAxB,EAAgC,IAAhC,EAAsCV,IAAI,CAACc,KAA3C,CAAlB;IACH,CAFD,CAEE,OAAOa,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAAEG,IAAI,EAAEjB,WAAW,CAACwC,KAApB;QAA2BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAApC,CAAD,CAAR;IACH;EACJ,CAd0B;AAAA,CAApB;AAgBP,OAAO,MAAMmB,aAAa,GAAG;EAAA,IAAC;IAACJ,OAAD;IAAUlC,IAAV;IAAgBE;EAAhB,CAAD;EAAA,OAA2B,MAAOE,QAAP,IAAoB;IAExE,MAAMH,UAAU,GAAG,EAAC,GAAGiC,OAAJ;MAAaG,KAAK,EAAE7C,UAAU,CAAC0C,OAAO,CAACG,KAAT,EAAgBnC,IAAI,CAACY,IAAL,CAAUF,GAA1B;IAA9B,CAAnB;IAEA,MAAMuB,WAAW,GAAG5C,QAAQ,CAACS,IAAI,CAACM,QAAN,EAAgB4B,OAAO,CAACtB,GAAxB,EAA6BX,UAA7B,CAA5B;IAEA,MAAMI,OAAO,GAAG,EAAC,GAAGL,IAAJ;MAAUM,QAAQ,EAAE6B;IAApB,CAAhB;IAEA/B,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;;IAEA,IAAI;MACA,MAAMV,YAAY,CAAE,WAAUuC,OAAO,CAACtB,GAAI,SAAxB,EAAkC,IAAlC,EAAwCV,IAAI,CAACc,KAA7C,CAAlB;IACH,CAFD,CAEE,OAAOa,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAAEG,IAAI,EAAEjB,WAAW,CAACwC,KAApB;QAA2BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAApC,CAAD,CAAR;IACH;EACJ,CAf4B;AAAA,CAAtB;AAiBP,OAAO,MAAMoB,aAAa,GAAG;EAAA,IAAC;IAACvC,IAAD;IAAOkC,OAAP;IAAgBhC,IAAhB;IAAsBC;EAAtB,CAAD;EAAA,OAAmC,MAAOC,QAAP,IAAoB;IAChF,MAAMoC,SAAS,GAAG,CAAC,GAAGxC,IAAI,CAACM,QAAL,CAAcmC,MAAd,CAAqBC,EAAE,IAAIA,EAAE,CAACpB,KAAH,KAAaY,OAAO,CAACtB,GAAhD,CAAJ,EAA0DsB,OAA1D,CAAlB;IAEA,MAAM7B,OAAO,GAAG,EACZ,GAAGL,IADS;MAEZM,QAAQ,EAAEN,IAAI,CAACM,QAAL,CAAcmC,MAAd,CAAqBC,EAAE,IAAI,CAACF,SAAS,CAACG,IAAV,CAAeC,EAAE,IAAIF,EAAE,CAAC9B,GAAH,KAAWgC,EAAE,CAAChC,GAAnC,CAA5B;IAFE,CAAhB;IAKAR,QAAQ,CAAC;MAAEG,IAAI,EAAEd,UAAU,CAACe,WAAnB;MAAgCC,OAAO,EAAEJ;IAAzC,CAAD,CAAR;IAEAF,MAAM,CAACe,IAAP,CAAY,eAAZ,EAA6Bb,OAA7B;;IACA,IAAI;MACDmC,SAAS,CAACK,OAAV,CAAkBC,IAAI,IAAI;QACrBlD,aAAa,CAAE,WAAUkD,IAAI,CAAClC,GAAI,EAArB,EAAwBV,IAAI,CAACc,KAA7B,CAAb;QAEA,MAAMG,GAAG,GAAG;UACRC,EAAE,EAAE0B,IAAI,CAAClC,GADD;UAERS,IAAI,EAAEa,OAAO,CAACZ,KAAR,GAAgB,6BAAhB,GAAgD,6BAF9C;UAGRC,UAAU,EAAEW,OAAO,CAACZ,KAAR,GAAgB,CAACY,OAAO,CAACV,GAAR,CAAYZ,GAAb,CAAhB,GAAoC,CAACZ,IAAI,CAACc,IAAL,CAAUF,GAAX,CAHxC;UAIRa,GAAG,EAAG,SAAQzB,IAAI,CAACY,GAAI;QAJf,CAAZ;QAOAR,QAAQ,CAACN,YAAY,CAAC;UAACqB,GAAD;UAAMjB,IAAN;UAAYC;QAAZ,CAAD,CAAb,CAAR;MACJ,CAXD;IAYF,CAbD,CAaE,OAAO0B,GAAP,EAAY;MACVzB,QAAQ,CAAC;QAAEG,IAAI,EAAEjB,WAAW,CAACwC,KAApB;QAA2BrB,OAAO,EAAE;UAACsB,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAatB,IAAb,CAAkBS;QAA1B;MAApC,CAAD,CAAR;IACH;EAEJ,CA5B4B;AAAA,CAAtB"},"metadata":{},"sourceType":"module"}