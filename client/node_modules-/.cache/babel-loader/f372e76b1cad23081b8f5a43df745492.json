{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from '../actions/globalTypes';\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData';\nexport const MESS_TYPES = {\n  ADD_USER: 'ADD_USER',\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n  GET_MESSAGES: 'GET_MESSAGES',\n  UPDATE_MESSAGES: 'UPDATE_MESSAGES',\n  DELETE_MESSAGES: 'DELETE_MESSAGES',\n  DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n  CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE'\n};\nexport const addMessage = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: MESS_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    const {\n      _id,\n      avatar,\n      fullname,\n      username\n    } = auth.user;\n    socket.emit('addMessage', { ...msg,\n      user: {\n        _id,\n        avatar,\n        fullname,\n        username\n      }\n    });\n\n    try {\n      await postDataAPI('message', msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = _ref2 => {\n  let {\n    auth,\n    page = 1\n  } = _ref2;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media,\n              call: item.call\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESS_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessages = _ref3 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESS_TYPES.GET_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const loadMoreMessages = _ref4 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESS_TYPES.UPDATE_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteMessages = _ref5 => {\n  let {\n    msg,\n    data,\n    auth\n  } = _ref5;\n  return async dispatch => {\n    const newData = DeleteData(data, msg._id);\n    dispatch({\n      type: MESS_TYPES.DELETE_MESSAGES,\n      payload: {\n        newData,\n        _id: msg.recipient\n      }\n    });\n\n    try {\n      await deleteDataAPI(`message/${msg._id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteConversation = _ref6 => {\n  let {\n    auth,\n    id\n  } = _ref6;\n  return async dispatch => {\n    dispatch({\n      type: MESS_TYPES.DELETE_CONVERSATION,\n      payload: id\n    });\n\n    try {\n      await deleteDataAPI(`conversation/${id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["GLOBALTYPES","DeleteData","postDataAPI","getDataAPI","deleteDataAPI","MESS_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","addMessage","msg","auth","socket","dispatch","type","payload","_id","avatar","fullname","username","user","emit","token","err","ALERT","error","response","data","getConversations","page","res","newArr","conversations","forEach","item","recipients","cv","push","text","media","call","result","getMessages","id","newData","messages","reverse","loadMoreMessages","deleteMessages","recipient","deleteConversation"],"sources":["/Users/jiawenzhu/developer/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/messageAction.js"],"sourcesContent":["import { GLOBALTYPES, DeleteData } from '../actions/globalTypes'\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData'\n\nexport const MESS_TYPES = {\n    ADD_USER: 'ADD_USER',\n    ADD_MESSAGE: 'ADD_MESSAGE',\n    GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n    GET_MESSAGES: 'GET_MESSAGES',\n    UPDATE_MESSAGES: 'UPDATE_MESSAGES',\n    DELETE_MESSAGES: 'DELETE_MESSAGES',\n    DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n    CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE'\n}\n\n\n\nexport const addMessage = ({msg, auth, socket}) => async (dispatch) =>{\n    dispatch({type: MESS_TYPES.ADD_MESSAGE, payload: msg})\n\n    const { _id, avatar, fullname, username } = auth.user\n    socket.emit('addMessage', {...msg, user: { _id, avatar, fullname, username } })\n    \n    try {\n        await postDataAPI('message', msg, auth.token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const getConversations = ({auth, page = 1}) => async (dispatch) => {\n    try {\n        const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token)\n        \n        let newArr = [];\n        res.data.conversations.forEach(item => {\n            item.recipients.forEach(cv => {\n                if(cv._id !== auth.user._id){\n                    newArr.push({...cv, text: item.text, media: item.media, call: item.call})\n                }\n            })\n        })\n\n        dispatch({\n            type: MESS_TYPES.GET_CONVERSATIONS, \n            payload: {newArr, result: res.data.result}\n        })\n\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const getMessages = ({auth, id, page = 1}) => async (dispatch) => {\n    try {\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\n        const newData = {...res.data, messages: res.data.messages.reverse()}\n\n        dispatch({type: MESS_TYPES.GET_MESSAGES, payload: {...newData, _id: id, page}})\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const loadMoreMessages = ({auth, id, page = 1}) => async (dispatch) => {\n    try {\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\n        const newData = {...res.data, messages: res.data.messages.reverse()}\n\n        dispatch({type: MESS_TYPES.UPDATE_MESSAGES, payload: {...newData, _id: id, page}})\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const deleteMessages = ({msg, data, auth}) => async (dispatch) => {\n    const newData = DeleteData(data, msg._id)\n    dispatch({type: MESS_TYPES.DELETE_MESSAGES, payload: {newData, _id: msg.recipient}})\n    try {\n        await deleteDataAPI(`message/${msg._id}`, auth.token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const deleteConversation = ({auth, id}) => async (dispatch) => {\n    dispatch({type: MESS_TYPES.DELETE_CONVERSATION, payload: id})\n    try {\n        await deleteDataAPI(`conversation/${id}`, auth.token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}