{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nconst eio = require(\"engine.io-client\");\n\nconst socket_1 = require(\"./socket\");\n\nconst Emitter = require(\"component-emitter\");\n\nconst parser = require(\"socket.io-parser\");\n\nconst on_1 = require(\"./on\");\n\nconst Backoff = require(\"backo2\");\n\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\n\nclass Manager extends Emitter {\n  constructor(uri, opts) {\n    super();\n    this.nsps = {};\n    this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor(opts.randomizationFactor || 0.5);\n    this.backoff = new Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n\n    const _parser = opts.parser || parser;\n\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n\n  reconnectionDelay(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n\n  randomizationFactor(v) {\n    var _a;\n\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n\n  reconnectionDelayMax(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\n   * Starts trying to reconnect if reconnection is enabled and we have not\n   * started reconnecting yet\n   *\n   * @private\n   */\n\n\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\n   * Sets the current transport `socket`.\n   *\n   * @param {Function} fn - optional, callback\n   * @return self\n   * @public\n   */\n\n\n  open(fn) {\n    debug(\"readyState %s\", this._readyState);\n    if (~this._readyState.indexOf(\"open\")) return this;\n    debug(\"opening %s\", this.uri);\n    this.engine = eio(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false; // emit `open`\n\n    const openSubDestroy = on_1.on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    }); // emit `error`\n\n    const errorSub = on_1.on(socket, \"error\", err => {\n      debug(\"error\");\n      self.cleanup();\n      self._readyState = \"closed\";\n      super.emit(\"error\", err);\n\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        self.maybeReconnectOnOpen();\n      }\n    });\n\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n      debug(\"connect attempt will timeout after %d\", timeout);\n\n      if (timeout === 0) {\n        openSubDestroy(); // prevents a race condition with the 'open' event\n      } // set timer\n\n\n      const timer = setTimeout(() => {\n        debug(\"connect attempt timed out after %d\", timeout);\n        openSubDestroy();\n        socket.close();\n        socket.emit(\"error\", new Error(\"timeout\"));\n      }, timeout);\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\n   * Alias for open()\n   *\n   * @return self\n   * @public\n   */\n\n\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\n   * Called upon transport open.\n   *\n   * @private\n   */\n\n\n  onopen() {\n    debug(\"open\"); // clear old subs\n\n    this.cleanup(); // mark as open\n\n    this._readyState = \"open\";\n    super.emit(\"open\"); // add new subs\n\n    const socket = this.engine;\n    this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  /**\n   * Called upon a ping.\n   *\n   * @private\n   */\n\n\n  onping() {\n    super.emit(\"ping\");\n  }\n  /**\n   * Called with data.\n   *\n   * @private\n   */\n\n\n  ondata(data) {\n    this.decoder.add(data);\n  }\n  /**\n   * Called when parser fully decodes a packet.\n   *\n   * @private\n   */\n\n\n  ondecoded(packet) {\n    super.emit(\"packet\", packet);\n  }\n  /**\n   * Called upon socket error.\n   *\n   * @private\n   */\n\n\n  onerror(err) {\n    debug(\"error\", err);\n    super.emit(\"error\", err);\n  }\n  /**\n   * Creates a new socket for the given `nsp`.\n   *\n   * @return {Socket}\n   * @public\n   */\n\n\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n\n    if (!socket) {\n      socket = new socket_1.Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    }\n\n    return socket;\n  }\n  /**\n   * Called upon a socket close.\n   *\n   * @param socket\n   * @private\n   */\n\n\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n\n    for (const nsp of nsps) {\n      const socket = this.nsps[nsp];\n\n      if (socket.active) {\n        debug(\"socket %s is still active, skipping close\", nsp);\n        return;\n      }\n    }\n\n    this._close();\n  }\n  /**\n   * Writes a packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  _packet(packet) {\n    debug(\"writing packet %j\", packet);\n    const encodedPackets = this.encoder.encode(packet);\n\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\n   * Clean up transport subscriptions and packet buffer.\n   *\n   * @private\n   */\n\n\n  cleanup() {\n    debug(\"cleanup\");\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  /**\n   * Close the current socket.\n   *\n   * @private\n   */\n\n\n  _close() {\n    debug(\"disconnect\");\n    this.skipReconnect = true;\n    this._reconnecting = false;\n\n    if (\"opening\" === this._readyState) {\n      // `onclose` will not fire because\n      // an open event never happened\n      this.cleanup();\n    }\n\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    if (this.engine) this.engine.close();\n  }\n  /**\n   * Alias for close()\n   *\n   * @private\n   */\n\n\n  disconnect() {\n    return this._close();\n  }\n  /**\n   * Called upon engine close.\n   *\n   * @private\n   */\n\n\n  onclose(reason) {\n    debug(\"onclose\");\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    super.emit(\"close\", reason);\n\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\n   * Attempt a reconnection.\n   *\n   * @private\n   */\n\n\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      debug(\"reconnect failed\");\n      this.backoff.reset();\n      super.emit(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      debug(\"will wait %dms before reconnect attempt\", delay);\n      this._reconnecting = true;\n      const timer = setTimeout(() => {\n        if (self.skipReconnect) return;\n        debug(\"attempting reconnect\");\n        super.emit(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            debug(\"reconnect attempt error\");\n            self._reconnecting = false;\n            self.reconnect();\n            super.emit(\"reconnect_error\", err);\n          } else {\n            debug(\"reconnect success\");\n            self.onreconnect();\n          }\n        });\n      }, delay);\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n  }\n  /**\n   * Called upon successful reconnect.\n   *\n   * @private\n   */\n\n\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    super.emit(\"reconnect\", attempt);\n  }\n\n}\n\nexports.Manager = Manager;","map":{"version":3,"names":["Object","defineProperty","exports","value","Manager","eio","require","socket_1","Emitter","parser","on_1","Backoff","debug","constructor","uri","opts","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_a","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","on","onopen","errorSub","err","cleanup","emit","timer","setTimeout","close","Error","push","subDestroy","clearTimeout","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","packet","nsp","Socket","_destroy","keys","active","_close","_packet","encodedPackets","encode","i","write","options","forEach","destroy","reset","disconnect","reason","delay","duration","onreconnect","attempt"],"sources":["/Users/jiawenzhu/developer/MERN-Stack-Build-a-social-media-app/client/node_modules/socket.io-client/build/manager.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Manager = void 0;\nconst eio = require(\"engine.io-client\");\nconst socket_1 = require(\"./socket\");\nconst Emitter = require(\"component-emitter\");\nconst parser = require(\"socket.io-parser\");\nconst on_1 = require(\"./on\");\nconst Backoff = require(\"backo2\");\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\nclass Manager extends Emitter {\n    constructor(uri, opts) {\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor(opts.randomizationFactor || 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = eio(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on_1.on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on_1.on(socket, \"error\", (err) => {\n            debug(\"error\");\n            self.cleanup();\n            self._readyState = \"closed\";\n            super.emit(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = setTimeout(() => {\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                socket.close();\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        super.emit(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on_1.on(socket, \"ping\", this.onping.bind(this)), on_1.on(socket, \"data\", this.ondata.bind(this)), on_1.on(socket, \"error\", this.onerror.bind(this)), on_1.on(socket, \"close\", this.onclose.bind(this)), on_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        super.emit(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        super.emit(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        debug(\"error\", err);\n        super.emit(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_1.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        if (\"opening\" === this._readyState) {\n            // `onclose` will not fire because\n            // an open event never happened\n            this.cleanup();\n        }\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        debug(\"onclose\");\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        super.emit(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            super.emit(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = setTimeout(() => {\n                if (self.skipReconnect)\n                    return;\n                debug(\"attempting reconnect\");\n                super.emit(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        super.emit(\"reconnect_error\", err);\n                    }\n                    else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        super.emit(\"reconnect\", attempt);\n    }\n}\nexports.Manager = Manager;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,QAAD,CAAvB;;AACA,MAAMM,KAAK,GAAGN,OAAO,CAAC,OAAD,CAAP,CAAiB,0BAAjB,CAAd;;AACA,MAAMF,OAAN,SAAsBI,OAAtB,CAA8B;EAC1BK,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAY;IACnB;IACA,KAAKC,IAAL,GAAY,EAAZ;IACA,KAAKC,IAAL,GAAY,EAAZ;;IACA,IAAIH,GAAG,IAAI,aAAa,OAAOA,GAA/B,EAAoC;MAChCC,IAAI,GAAGD,GAAP;MACAA,GAAG,GAAGI,SAAN;IACH;;IACDH,IAAI,GAAGA,IAAI,IAAI,EAAf;IACAA,IAAI,CAACI,IAAL,GAAYJ,IAAI,CAACI,IAAL,IAAa,YAAzB;IACA,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKK,YAAL,CAAkBL,IAAI,CAACK,YAAL,KAAsB,KAAxC;IACA,KAAKC,oBAAL,CAA0BN,IAAI,CAACM,oBAAL,IAA6BC,QAAvD;IACA,KAAKC,iBAAL,CAAuBR,IAAI,CAACQ,iBAAL,IAA0B,IAAjD;IACA,KAAKC,oBAAL,CAA0BT,IAAI,CAACS,oBAAL,IAA6B,IAAvD;IACA,KAAKC,mBAAL,CAAyBV,IAAI,CAACU,mBAAL,IAA4B,GAArD;IACA,KAAKC,OAAL,GAAe,IAAIf,OAAJ,CAAY;MACvBgB,GAAG,EAAE,KAAKJ,iBAAL,EADkB;MAEvBK,GAAG,EAAE,KAAKJ,oBAAL,EAFkB;MAGvBK,MAAM,EAAE,KAAKJ,mBAAL;IAHe,CAAZ,CAAf;IAKA,KAAKK,OAAL,CAAa,QAAQf,IAAI,CAACe,OAAb,GAAuB,KAAvB,GAA+Bf,IAAI,CAACe,OAAjD;IACA,KAAKC,WAAL,GAAmB,QAAnB;IACA,KAAKjB,GAAL,GAAWA,GAAX;;IACA,MAAMkB,OAAO,GAAGjB,IAAI,CAACN,MAAL,IAAeA,MAA/B;;IACA,KAAKwB,OAAL,GAAe,IAAID,OAAO,CAACE,OAAZ,EAAf;IACA,KAAKC,OAAL,GAAe,IAAIH,OAAO,CAACI,OAAZ,EAAf;IACA,KAAKC,YAAL,GAAoBtB,IAAI,CAACuB,WAAL,KAAqB,KAAzC;IACA,IAAI,KAAKD,YAAT,EACI,KAAKE,IAAL;EACP;;EACDnB,YAAY,CAACoB,CAAD,EAAI;IACZ,IAAI,CAACC,SAAS,CAACC,MAAf,EACI,OAAO,KAAKC,aAAZ;IACJ,KAAKA,aAAL,GAAqB,CAAC,CAACH,CAAvB;IACA,OAAO,IAAP;EACH;;EACDnB,oBAAoB,CAACmB,CAAD,EAAI;IACpB,IAAIA,CAAC,KAAKtB,SAAV,EACI,OAAO,KAAK0B,qBAAZ;IACJ,KAAKA,qBAAL,GAA6BJ,CAA7B;IACA,OAAO,IAAP;EACH;;EACDjB,iBAAiB,CAACiB,CAAD,EAAI;IACjB,IAAIK,EAAJ;;IACA,IAAIL,CAAC,KAAKtB,SAAV,EACI,OAAO,KAAK4B,kBAAZ;IACJ,KAAKA,kBAAL,GAA0BN,CAA1B;IACA,CAACK,EAAE,GAAG,KAAKnB,OAAX,MAAwB,IAAxB,IAAgCmB,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACE,MAAH,CAAUP,CAAV,CAAzD;IACA,OAAO,IAAP;EACH;;EACDf,mBAAmB,CAACe,CAAD,EAAI;IACnB,IAAIK,EAAJ;;IACA,IAAIL,CAAC,KAAKtB,SAAV,EACI,OAAO,KAAK8B,oBAAZ;IACJ,KAAKA,oBAAL,GAA4BR,CAA5B;IACA,CAACK,EAAE,GAAG,KAAKnB,OAAX,MAAwB,IAAxB,IAAgCmB,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACI,SAAH,CAAaT,CAAb,CAAzD;IACA,OAAO,IAAP;EACH;;EACDhB,oBAAoB,CAACgB,CAAD,EAAI;IACpB,IAAIK,EAAJ;;IACA,IAAIL,CAAC,KAAKtB,SAAV,EACI,OAAO,KAAKgC,qBAAZ;IACJ,KAAKA,qBAAL,GAA6BV,CAA7B;IACA,CAACK,EAAE,GAAG,KAAKnB,OAAX,MAAwB,IAAxB,IAAgCmB,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACM,MAAH,CAAUX,CAAV,CAAzD;IACA,OAAO,IAAP;EACH;;EACDV,OAAO,CAACU,CAAD,EAAI;IACP,IAAI,CAACC,SAAS,CAACC,MAAf,EACI,OAAO,KAAKU,QAAZ;IACJ,KAAKA,QAAL,GAAgBZ,CAAhB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIa,oBAAoB,GAAG;IACnB;IACA,IAAI,CAAC,KAAKC,aAAN,IACA,KAAKX,aADL,IAEA,KAAKjB,OAAL,CAAa6B,QAAb,KAA0B,CAF9B,EAEiC;MAC7B;MACA,KAAKC,SAAL;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIjB,IAAI,CAACkB,EAAD,EAAK;IACL7C,KAAK,CAAC,eAAD,EAAkB,KAAKmB,WAAvB,CAAL;IACA,IAAI,CAAC,KAAKA,WAAL,CAAiB2B,OAAjB,CAAyB,MAAzB,CAAL,EACI,OAAO,IAAP;IACJ9C,KAAK,CAAC,YAAD,EAAe,KAAKE,GAApB,CAAL;IACA,KAAK6C,MAAL,GAActD,GAAG,CAAC,KAAKS,GAAN,EAAW,KAAKC,IAAhB,CAAjB;IACA,MAAM6C,MAAM,GAAG,KAAKD,MAApB;IACA,MAAME,IAAI,GAAG,IAAb;IACA,KAAK9B,WAAL,GAAmB,SAAnB;IACA,KAAK+B,aAAL,GAAqB,KAArB,CATK,CAUL;;IACA,MAAMC,cAAc,GAAGrD,IAAI,CAACsD,EAAL,CAAQJ,MAAR,EAAgB,MAAhB,EAAwB,YAAY;MACvDC,IAAI,CAACI,MAAL;MACAR,EAAE,IAAIA,EAAE,EAAR;IACH,CAHsB,CAAvB,CAXK,CAeL;;IACA,MAAMS,QAAQ,GAAGxD,IAAI,CAACsD,EAAL,CAAQJ,MAAR,EAAgB,OAAhB,EAA0BO,GAAD,IAAS;MAC/CvD,KAAK,CAAC,OAAD,CAAL;MACAiD,IAAI,CAACO,OAAL;MACAP,IAAI,CAAC9B,WAAL,GAAmB,QAAnB;MACA,MAAMsC,IAAN,CAAW,OAAX,EAAoBF,GAApB;;MACA,IAAIV,EAAJ,EAAQ;QACJA,EAAE,CAACU,GAAD,CAAF;MACH,CAFD,MAGK;QACD;QACAN,IAAI,CAACR,oBAAL;MACH;IACJ,CAZgB,CAAjB;;IAaA,IAAI,UAAU,KAAKD,QAAnB,EAA6B;MACzB,MAAMtB,OAAO,GAAG,KAAKsB,QAArB;MACAxC,KAAK,CAAC,uCAAD,EAA0CkB,OAA1C,CAAL;;MACA,IAAIA,OAAO,KAAK,CAAhB,EAAmB;QACfiC,cAAc,GADC,CACG;MACrB,CALwB,CAMzB;;;MACA,MAAMO,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC3B3D,KAAK,CAAC,oCAAD,EAAuCkB,OAAvC,CAAL;QACAiC,cAAc;QACdH,MAAM,CAACY,KAAP;QACAZ,MAAM,CAACS,IAAP,CAAY,OAAZ,EAAqB,IAAII,KAAJ,CAAU,SAAV,CAArB;MACH,CALuB,EAKrB3C,OALqB,CAAxB;MAMA,KAAKb,IAAL,CAAUyD,IAAV,CAAe,SAASC,UAAT,GAAsB;QACjCC,YAAY,CAACN,KAAD,CAAZ;MACH,CAFD;IAGH;;IACD,KAAKrD,IAAL,CAAUyD,IAAV,CAAeX,cAAf;IACA,KAAK9C,IAAL,CAAUyD,IAAV,CAAeR,QAAf;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIW,OAAO,CAACpB,EAAD,EAAK;IACR,OAAO,KAAKlB,IAAL,CAAUkB,EAAV,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIQ,MAAM,GAAG;IACLrD,KAAK,CAAC,MAAD,CAAL,CADK,CAEL;;IACA,KAAKwD,OAAL,GAHK,CAIL;;IACA,KAAKrC,WAAL,GAAmB,MAAnB;IACA,MAAMsC,IAAN,CAAW,MAAX,EANK,CAOL;;IACA,MAAMT,MAAM,GAAG,KAAKD,MAApB;IACA,KAAK1C,IAAL,CAAUyD,IAAV,CAAehE,IAAI,CAACsD,EAAL,CAAQJ,MAAR,EAAgB,MAAhB,EAAwB,KAAKkB,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAxB,CAAf,EAAgErE,IAAI,CAACsD,EAAL,CAAQJ,MAAR,EAAgB,MAAhB,EAAwB,KAAKoB,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAxB,CAAhE,EAAiHrE,IAAI,CAACsD,EAAL,CAAQJ,MAAR,EAAgB,OAAhB,EAAyB,KAAKqB,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAzB,CAAjH,EAAoKrE,IAAI,CAACsD,EAAL,CAAQJ,MAAR,EAAgB,OAAhB,EAAyB,KAAKsB,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAzB,CAApK,EAAuNrE,IAAI,CAACsD,EAAL,CAAQ,KAAK7B,OAAb,EAAsB,SAAtB,EAAiC,KAAKgD,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjC,CAAvN;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACID,MAAM,GAAG;IACL,MAAMT,IAAN,CAAW,MAAX;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIW,MAAM,CAACI,IAAD,EAAO;IACT,KAAKjD,OAAL,CAAakD,GAAb,CAAiBD,IAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACID,SAAS,CAACG,MAAD,EAAS;IACd,MAAMjB,IAAN,CAAW,QAAX,EAAqBiB,MAArB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIL,OAAO,CAACd,GAAD,EAAM;IACTvD,KAAK,CAAC,OAAD,EAAUuD,GAAV,CAAL;IACA,MAAME,IAAN,CAAW,OAAX,EAAoBF,GAApB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIP,MAAM,CAAC2B,GAAD,EAAMxE,IAAN,EAAY;IACd,IAAI6C,MAAM,GAAG,KAAK5C,IAAL,CAAUuE,GAAV,CAAb;;IACA,IAAI,CAAC3B,MAAL,EAAa;MACTA,MAAM,GAAG,IAAIrD,QAAQ,CAACiF,MAAb,CAAoB,IAApB,EAA0BD,GAA1B,EAA+BxE,IAA/B,CAAT;MACA,KAAKC,IAAL,CAAUuE,GAAV,IAAiB3B,MAAjB;IACH;;IACD,OAAOA,MAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI6B,QAAQ,CAAC7B,MAAD,EAAS;IACb,MAAM5C,IAAI,GAAGhB,MAAM,CAAC0F,IAAP,CAAY,KAAK1E,IAAjB,CAAb;;IACA,KAAK,MAAMuE,GAAX,IAAkBvE,IAAlB,EAAwB;MACpB,MAAM4C,MAAM,GAAG,KAAK5C,IAAL,CAAUuE,GAAV,CAAf;;MACA,IAAI3B,MAAM,CAAC+B,MAAX,EAAmB;QACf/E,KAAK,CAAC,2CAAD,EAA8C2E,GAA9C,CAAL;QACA;MACH;IACJ;;IACD,KAAKK,MAAL;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,OAAO,CAACP,MAAD,EAAS;IACZ1E,KAAK,CAAC,mBAAD,EAAsB0E,MAAtB,CAAL;IACA,MAAMQ,cAAc,GAAG,KAAK7D,OAAL,CAAa8D,MAAb,CAAoBT,MAApB,CAAvB;;IACA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACpD,MAAnC,EAA2CsD,CAAC,EAA5C,EAAgD;MAC5C,KAAKrC,MAAL,CAAYsC,KAAZ,CAAkBH,cAAc,CAACE,CAAD,CAAhC,EAAqCV,MAAM,CAACY,OAA5C;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACI9B,OAAO,GAAG;IACNxD,KAAK,CAAC,SAAD,CAAL;IACA,KAAKK,IAAL,CAAUkF,OAAV,CAAmBxB,UAAD,IAAgBA,UAAU,EAA5C;IACA,KAAK1D,IAAL,CAAUyB,MAAV,GAAmB,CAAnB;IACA,KAAKP,OAAL,CAAaiE,OAAb;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIR,MAAM,GAAG;IACLhF,KAAK,CAAC,YAAD,CAAL;IACA,KAAKkD,aAAL,GAAqB,IAArB;IACA,KAAKR,aAAL,GAAqB,KAArB;;IACA,IAAI,cAAc,KAAKvB,WAAvB,EAAoC;MAChC;MACA;MACA,KAAKqC,OAAL;IACH;;IACD,KAAK1C,OAAL,CAAa2E,KAAb;IACA,KAAKtE,WAAL,GAAmB,QAAnB;IACA,IAAI,KAAK4B,MAAT,EACI,KAAKA,MAAL,CAAYa,KAAZ;EACP;EACD;AACJ;AACA;AACA;AACA;;;EACI8B,UAAU,GAAG;IACT,OAAO,KAAKV,MAAL,EAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIV,OAAO,CAACqB,MAAD,EAAS;IACZ3F,KAAK,CAAC,SAAD,CAAL;IACA,KAAKwD,OAAL;IACA,KAAK1C,OAAL,CAAa2E,KAAb;IACA,KAAKtE,WAAL,GAAmB,QAAnB;IACA,MAAMsC,IAAN,CAAW,OAAX,EAAoBkC,MAApB;;IACA,IAAI,KAAK5D,aAAL,IAAsB,CAAC,KAAKmB,aAAhC,EAA+C;MAC3C,KAAKN,SAAL;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIA,SAAS,GAAG;IACR,IAAI,KAAKF,aAAL,IAAsB,KAAKQ,aAA/B,EACI,OAAO,IAAP;IACJ,MAAMD,IAAI,GAAG,IAAb;;IACA,IAAI,KAAKnC,OAAL,CAAa6B,QAAb,IAAyB,KAAKX,qBAAlC,EAAyD;MACrDhC,KAAK,CAAC,kBAAD,CAAL;MACA,KAAKc,OAAL,CAAa2E,KAAb;MACA,MAAMhC,IAAN,CAAW,kBAAX;MACA,KAAKf,aAAL,GAAqB,KAArB;IACH,CALD,MAMK;MACD,MAAMkD,KAAK,GAAG,KAAK9E,OAAL,CAAa+E,QAAb,EAAd;MACA7F,KAAK,CAAC,yCAAD,EAA4C4F,KAA5C,CAAL;MACA,KAAKlD,aAAL,GAAqB,IAArB;MACA,MAAMgB,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC3B,IAAIV,IAAI,CAACC,aAAT,EACI;QACJlD,KAAK,CAAC,sBAAD,CAAL;QACA,MAAMyD,IAAN,CAAW,mBAAX,EAAgCR,IAAI,CAACnC,OAAL,CAAa6B,QAA7C,EAJ2B,CAK3B;;QACA,IAAIM,IAAI,CAACC,aAAT,EACI;QACJD,IAAI,CAACtB,IAAL,CAAW4B,GAAD,IAAS;UACf,IAAIA,GAAJ,EAAS;YACLvD,KAAK,CAAC,yBAAD,CAAL;YACAiD,IAAI,CAACP,aAAL,GAAqB,KAArB;YACAO,IAAI,CAACL,SAAL;YACA,MAAMa,IAAN,CAAW,iBAAX,EAA8BF,GAA9B;UACH,CALD,MAMK;YACDvD,KAAK,CAAC,mBAAD,CAAL;YACAiD,IAAI,CAAC6C,WAAL;UACH;QACJ,CAXD;MAYH,CApBuB,EAoBrBF,KApBqB,CAAxB;MAqBA,KAAKvF,IAAL,CAAUyD,IAAV,CAAe,SAASC,UAAT,GAAsB;QACjCC,YAAY,CAACN,KAAD,CAAZ;MACH,CAFD;IAGH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIoC,WAAW,GAAG;IACV,MAAMC,OAAO,GAAG,KAAKjF,OAAL,CAAa6B,QAA7B;IACA,KAAKD,aAAL,GAAqB,KAArB;IACA,KAAK5B,OAAL,CAAa2E,KAAb;IACA,MAAMhC,IAAN,CAAW,WAAX,EAAwBsC,OAAxB;EACH;;AApWyB;;AAsW9BzG,OAAO,CAACE,OAAR,GAAkBA,OAAlB"},"metadata":{},"sourceType":"script"}